openapi: 3.0.3
info:
  title: LMPS-API
  description: |-
    This is a wip API for the LMPS and external ressources.
  termsOfService: https://www.mac.de/en/terms-and-conditions/
  contact:
    email: dev@mac.de
  version: 2.0.0
externalDocs:
  description: github
  url: http://github.com/mac-brand-spaces/
servers:
  - url: https://api.mac.de/api/v2
    description: Production server
  - url: https://dev.api.mac.de/api/v2
    description: Development server
  - url: http://localhost:3000/api/v2
    description: Local development server
  - url: https://lalovosnjsp001.mac-rz.net:3000/api/v2
    description: Current testing server
tags:
  - name: project
    description: Everything about projects
    externalDocs:
      description: Find out more
      url: https://github.com/mac-brand-spaces/lmps-api
  - name: customer
    description: Everything about customers
    externalDocs:
      description: Find out more
      url: https://github.com/mac-brand-spaces/lmps-api
  - name: event
    description: Everything about events
    externalDocs:
      description: Find out more
      url: https://github.com/mac-brand-spaces/lmps-api
  - name: description
    description: Everything about descriptions
    externalDocs:
      description: Find out more
      url: https://github.com/mac-brand-spaces/lmps-api
paths:
  /projects:
    $ref: './schemas/projects.yaml#/paths/~1projects'
  /projects/{id}:
    $ref: './schemas/projects.yaml#/paths/~1projects~1{id}'
  /customers:
    $ref: './schemas/customers.yaml#/paths/~1customers'
  /customers/{id}:
    $ref: './schemas/customers.yaml#/paths/~1customers~1{id}'
  /events:
    $ref: './schemas/events.yaml#/paths/~1events'
  /events/{id}:
    $ref: './schemas/events.yaml#/paths/~1events~1{id}'
  /descriptions:
    $ref: './schemas/descriptions.yaml#/paths/~1descriptions'
  /descriptions/{id}:
    $ref: './schemas/descriptions.yaml#/paths/~1descriptions~1{id}'
  /descriptions/{description_id}/language:
    $ref: './schemas/descriptions.yaml#/paths/~1descriptions~1{description_id}~1language'
  /descriptions/{description_id}/language/{language_id}:
    $ref: './schemas/descriptions.yaml#/paths/~1descriptions~1{description_id}~1language~1{language_id}'

components:
  schemas:
    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          nullable: false
          readOnly: true
        title:
          type: string
          example: Test Item
          nullable: false
        photoUrls:
          type: array
          items:
            type: string
          example:
            - url1
            - url2
          nullable: true
          deprecated: true
        # TODO: add more properties here
  parameters:
    page:
      name: $page
      in: query
      description: |-
        The page number to return.
        Defaults to 1.
      required: false
      schema:
        type: string
        format: int32
        minimum: 1
        default: 1
    limit:
      name: $limit
      in: query
      description: |-
        The number of items to return per page.
        Defaults to 10.
      required: false
      schema:
        type: string
        format: int32
        minimum: 1
        maximum: 100
        default: 10
    id:
      name: id
      in: path
      description: |-
        The id of the item to retrieve.
      required: true
      schema:
        type: string
        format: uuid
  securitySchemes:
    bearerAuth:
      type: oauth2
      flows:
        authorizationCode:
          tokenUrl: https://macbrandspaces-test.eu.auth0.com/oauth/token
          authorizationUrl: https://macbrandspaces-test.eu.auth0.com/authorize?audience=https://lmps.mac.de/api
          refreshUrl: https://macbrandspaces-test.eu.auth0.com/oauth/token
          scopes:
            openid: openid - required by default
            profile: |
              returns claims that represent basic profile information, including 
              name,
              family_name,
              given_name,
              middle_name,
              nickname,
              picture, and
              updated_at.
            email: |
              Returns the email claim, which contains the user's email address, 
              and email_verified, which is a boolean indicating whether the email address was verified by the user.
            offline_access: |
              returns a refresh token that can be used to acquire a new access token when the original expires.
            "read:project": Read Project user is assigned to
            "read:project.all": Read all projects
            "create:project": Create a new project
            "update:project": Update a project the user is assigned to
            "update:project.all": Update all projects
            "delete:project": Delete a project the user is assigned to
            "delete:project.all": Delete all projects
            "read:customer": Read Customer user is assigned to
            "read:customer.all": Read all customers
            "create:customer": Create a new customer
            "update:customer": Update a customer the user is assigned to
            "update:customer.all": Update all customers
            "delete:customer": Delete a customer the user is assigned to
            "delete:customer.all": Delete all customers
            "read:event": Read Event user is assigned to
            "read:event.all": Read all events
            "create:event": Create a new event
            "update:event": Update a event the user is assigned to
            "update:event.all": Update all events
            "delete:event": Delete a event the user is assigned to
            "delete:event.all": Delete all events
